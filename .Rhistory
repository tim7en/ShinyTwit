}
psum <-0
csum <-0
}
}
valList
if (is.null(valList)){valList<-0}
valList
round((sum(valList)/length(valList)),3)
# Define function to find average duration and intensity in amount/days of consecutive wet events that are equal or above 1mm.
eventIntensity<-function(x){
psum<-0 #Sum of precip per event
csum<-0 #Count of days per event
valList<-NULL
j<-1
for (i in seq (1,length(x))){
if (x[i]>=1) {
psum<-psum+x[i]
csum<-csum+1
if (i == length(x)){
if (csum<2) {}
else {valList[j] <- psum/csum}
}
} else {
if (csum<2) {}
else {
valList[j]<-psum/csum
j<-j+1
}
psum <-0
csum <-0
}
}
if (is.null(valList)){valList<-0}
return (round((sum(valList)/length(valList)),3))
}
x <- c(0,0,3,3,3,2,0,0,2,0,0,3,3,1,2,3,0,0,0,0)
eventIntensity(x)
x <- c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
eventIntensity(x)
x <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
eventIntensity(x)
x <- c(1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
eventIntensity(x)
x <- c(0,0,1,0,1,0,3,0,0,3,3,0,0,0,0,0,0,0,0,0)
eventIntensity(x)
x <- c(0,0,1,0,1,0,3,0,0,3,9,0,0,0,0,0,0,0,0,0)
eventIntensity(x)
x <- c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,30,15)
eventIntensity(x)
mean(5,30,15)
5+30
35+15
50/3
(5+30+15)/3
mean (5,30,15)
?mean
mean (c(5,30,15))
LS8_14_18 <- list.dirs(path = "D:/WorkingDir/Mapping_Projects/Thesis_pskem/R_scripts/EVI_NDVI/LS8_10th", full.names = TRUE, recursive = TRUE)
LS8_14_18 <- LS8_14_18[-1]
library(shiny); runApp('RSPrj/main.R')
library(shiny); runApp('RSPrj/main.R')
runApp('RSPrj/main.R')
x <- c(5,3,6,1,2,3,4)
x
order (x)
sort (x)
x
sort (x)
runApp('RSPrj/main.R')
runApp('RSPrj/main.R')
x <- c(1,3,5,6,2,3,5,1,6,7)
x2< - c(3,5,1,6,3,5,5,1,8,9)
x2<- c(3,5,1,6,3,5,5,1,8,9)
z <- lm(x~x2)
z
plot (z)
plot (z$residuals)
plot (z$residuals~z$fitted.values)
lines (z$residuals~z$fitted.values)
plot (z$residuals~z$fitted.values)
abline (z$residuals~z$fitted.values)
abline (z$residuals,z$fitted.values)
qqplot (z$residuals)
qqplot (z$residuals, z$fitted.values)
qqplot (z$terms)
z$coefficients
z$residuals
z$effects
z$rank
z$fitted.values
z$assign
z$qr
z$df.residual
z$model$x
z$model$x2
qqnorm (z)
qqplot (z)
z
runApp('RSPrj/main.R')
runApp('RSPrj/main.R')
runApp('RSPrj/main.R')
runApp('RSPrj/main.R')
runApp('RSPrj/main.R')
runApp('RSPrj/main.R')
Sys.which("git")
git
sys.where git
Sys.which("git")
x <- read.csv ("example.csv")
summary(lm (x$Ni ~ x$Toc))
summary(lm (x$Ni ~ x$Size))
summary(lm (x$Ni ~ x$Size+x$Toc:x$Size))
plot (step(lm(x$Ni ~x$Size*x$Toc)))
fit <- lm(x$Ni ~x$Size*x$Toc)
fit2 <- (lm (x$Ni ~ x$Size+x$Toc:x$Size))
z<-x$Ni-((x$Size-t_s)*-1.56258+((x$Toc*x$Size)-(t_t*t_s))*0.21)
t_s<- 10
t_t <- 4
j<-x$Toc*x$Size
par(mfrow=c(2,2))
plot (x$Ni~x$Size)
plot (x$Ni~j)
plot (z~x$Size)
plot (z~j)
setwd("~/RSPrj")
x <- read.csv ("example.csv")
summary(lm (x$Ni ~ x$Toc))
summary(lm (x$Ni ~ x$Size))
summary(lm (x$Ni ~ x$Size+x$Toc:x$Size))
plot (step(lm(x$Ni ~x$Size*x$Toc)))
fit <- lm(x$Ni ~x$Size*x$Toc)
fit2 <- (lm (x$Ni ~ x$Size+x$Toc:x$Size))
z<-x$Ni-((x$Size-t_s)*-1.56258+((x$Toc*x$Size)-(t_t*t_s))*0.21)
t_s<- 10
t_t <- 4
j<-x$Toc*x$Size
par(mfrow=c(2,2))
plot (x$Ni~x$Size)
plot (x$Ni~j)
plot (z~x$Size)
plot (z~j)
setwd("~/")
rm(list = ls())
rm(list = ls())
rm(list = ls())
# Load the required R libraries
install.packages("RColorBrewer")
install.packages("tm")
install.packages("wordcloud")
install.packages('base64enc')
install.packages('ROAuth')
install.packages('plyr')
install.packages('stringr')
install.packages('twitteR')
library(RColorBrewer)
library(wordcloud)
library(tm)
library(twitteR)
library(ROAuth)
library(plyr)
library(stringr)
library(base64enc)
download.file(url="http://curl.haxx.se/ca/cacert.pem",destfile="cacert.pem")
consumerKey <- "889840922825019393-rDamD3WqBEwv9SNovddqYeZat5sXHlh"
consumerSecret <- "adifAyNKgcT5lY5H1KsN2DkDzXfcvtnQtTARvtyNLYArU"
rm(list = ls())
# Load the required R libraries
install.packages("RColorBrewer")
install.packages("tm")
install.packages("wordcloud")
install.packages('base64enc')
install.packages('ROAuth')
install.packages('plyr')
install.packages('stringr')
install.packages('twitteR')
library(RColorBrewer)
library(wordcloud)
library(tm)
library(twitteR)
library(ROAuth)
library(plyr)
library(stringr)
library(base64enc)
download.file(url="http://curl.haxx.se/ca/cacert.pem",destfile="cacert.pem")
# Set constant requestURL
requestURL <- "https://api.twitter.com/oauth/request_token"
# Set constant accessURL
accessURL <- "https://api.twitter.com/oauth/access_token"
# Set constant authURL
authURL <- "https://api.twitter.com/oauth/authorize"
setup_twitter_oauth(consumerKey,
consumerSecret,
accessToken,
accessTokenSecret)
consumerKey <- "mQlBizLfUy4kAhX7KpL4tHLIR"
consumerSecret <- "Panl7AQPfAKGp36S6priHnZnxSXXI07z33vL7X2SJV2V7cXYfZ"
accessToken <- "889840922825019393-rDamD3WqBEwv9SNovddqYeZat5sXHlh"
accessTokenSecret <- "adifAyNKgcT5lY5H1KsN2DkDzXfcvtnQtTARvtyNLYArU"
install.packages("RColorBrewer")
install.packages("tm")
install.packages("base64enc")
install.packages("ROAuth")
install.packages("plyr")
install.packages("wordcloud")
install.packages("stringr")
install.packages("twitteR")
install.packages("base64enc")
install.packages("plyr")
install.packages("stringr")
install.packages("ROAuth")
install.packages("wordcloud")
install.packages("twitteR")
install.packages("stringr")
install.packages("twitteR")
install.packages("ROAuth")
install.packages("wordcloud")
install.packages("ROAuth")
install.packages("wordcloud")
Objectname <- searchTwitter(searchString, n=no.of tweets, lang=NULL)
Objectname <- searchTwitter(searchString, n=1000, lang=NULL)
install.packages(twitterR)
install.packages("twitteR")
library(twitteR)
tweets_g <- searchTwitter("#google", n=1000,lang = "en")
tweets_a <- searchTwitter("#amazon", n=1000,lang = "en")
tweets_f <- searchTwitter("#facebook", n=1000,lang = "en")
tweets_tech <- searchTwitter("#technology", n=1000,lang = "en")
setup_twitter_oauth(consumerKey,
consumerSecret,
accessToken,
accessTokenSecret)
tweets_g <- searchTwitter("#google", n=1000,lang = "en")
tweets_a <- searchTwitter("#amazon", n=1000,lang = "en")
tweets_f <- searchTwitter("#facebook", n=1000,lang = "en")
tweets_tech <- searchTwitter("#technology", n=1000,lang = "en")
amazon_tweets <- twListToDF(tweets_a)
google_tweets <- twListToDF(tweets_g)
facebook_tweets <- twListToDF(tweets_f)
tech_tweets <- twListToDF(tweets_tech)
View(tech_tweets)
# Replace blank space (“rt”)
google_text <- gsub("rt", "", google_text)
#convert all text to lower case
google_text<- tolower(google_text)
google_text<- google_tweets$text
amazon_text<- amazon_tweets$text
facebook_text<- facebook_tweets$text
tech_text<- tech_tweets$text
#convert all text to lower case
google_text<- tolower(google_text)
amazon_text<- tolower(amazon_text)
facebook_text<- tolower(facebook_text)
tech_text<- tolower(tech_text)
# Replace blank space (“rt”)
google_text <- gsub("rt", "", google_text)
amazon_text <- gsub("rt", "", amazon_text)
facebook_text <- gsub("rt", "", facebook_text)
tech_text <- gsub("rt", "", tech_text)
# Replace @UserName
google_text <- gsub("@\\w+", "", google_text)
amazon_text <- gsub("@\\w+", "", amazon_text)
facebook_text <- gsub("@\\w+", "", facebook_text)
tech_text <- gsub("@\\w+", "", tech_text)
# Remove punctuation
google_text <- gsub("[[:punct:]]", "", google_text)
amazon_text <- gsub("[[:punct:]]", "", amazon_text)
facebook_text <- gsub("[[:punct:]]", "", facebook_text)
tech_text <- gsub("[[:punct:]]", "", tech_text)
# Remove links
google_text <- gsub("http\\w+", "", google_text)
amazon_text <- gsub("http\\w+", "", amazon_text)
facebook_text <- gsub("http\\w+", "", facebook_text)
tech_text <- gsub("http\\w+", "", tech_text)
# Remove tabs
google_text <- gsub("[ |\t]{2,}", "", google_text)
amazon_text <- gsub("[ |\t]{2,}", "", amazon_text)
facebook_text <- gsub("[ |\t]{2,}", "", facebook_text)
tech_text <- gsub("[ |\t]{2,}", "", tech_text)
# Remove blank spaces at the beginning
google_text <- gsub("^ ", "", google_text)
amazon_text <- gsub("^ ", "", amazon_text)
facebook_text <- gsub("^ ", "", facebook_text)
tech_text <- gsub("^ ", "", tech_text)
# Remove blank spaces at the end
google_text <- gsub(" $", "", google_text)
amazon_text <- gsub(" $", "", amazon_text)
facebook_text <- gsub(" $", "", facebook_text)
tech_text <- gsub(" $", "", tech_text)
#clean up by removing stop words
google_tweets.text.corpus <- tm_map(google_tweets.text.corpus, function(x)removeWords(x,stopwords()))
#clean up by removing stop words
google_tweets.text.corpus <- tm_map(google_tweets.text.corpus, function(x)removeWords(x,stopwords()))
View(amazon_tweets)
#clean up by removing stop words
google_tweets.text.corpus <- tm_map(google_tweets$text, function(x)removeWords(x,stopwords()))
#clean up by removing stop words
google_tweets.text.corpus <- tm_map(google_text, function(x)removeWords(x,stopwords()))
#clean up by removing stop words
google_tweets.text.corpus <- tm_map(google_tweets.text.corpus, function(x)removeWords(x,stopwords()))
google_tweets
#clean up by removing stop words
google_tweets.text.corpus <- tm_map(google_tweets, function(x)removeWords(x,stopwords()))
library("NLP")
library("syuzhet")
library("topicmodels")
install.packages("topicmodels")
install.packages("stringi")
install.packages("SnowballC")
install.packages("syuzhet")
install.packages("NLP")
# install.packages('twitteR')
library(RColorBrewer)
library(wordcloud)
library(tm)
library(twitteR)
library(ROAuth)
library(plyr)
library(stringr)
library(base64enc)
library("NLP")
library("syuzhet")
library("SnowballC")
library("stringi")
library("topicmodels")
install.packages("stringi")
# install.packages('twitteR')
library(RColorBrewer)
library(wordcloud)
library(tm)
library(twitteR)
library(ROAuth)
library(plyr)
library(stringr)
library(base64enc)
library("NLP")
library("syuzhet")
library("SnowballC")
library("stringi")
library("topicmodels")
library(stringi)
#clean up by removing stop words
google_tweets.text.corpus <- tm_map(google_tweets.text.corpus, function(x)removeWords(x,stopwords()))
removeWords()
stopwords()
?tm_map
library("stringi", lib.loc="~/R/win-library/3.3")
library(shiny); runApp('ShinyTwit/ShinyTwit.R')
setwd("~/ShinyTwit")
runApp('ShinyTwit.R')
rm(list = ls())
# source("pcg.R")
server <- function(input, output, session) {
options(shiny.maxRequestSize = 70 * 1024^2) # Max csv data limit set to 60 mb
output$inc <- eventReactive(input$lookup, {
req(input$lookup)
getPage <- function() {
return((HTML(readLines(paste("http://woeid.rosselliot.co.nz/lookup/", input$location, sep = "")))))
}
getPage()
})
plotTrending <- eventReactive(input$looktrending, {
req(input$looktrending)
req(input$TweetsN)
x <- searchTwitter(input$looktrending, n = input$TweetsN, lang = "en")
x <- twListToDF(x)
})
textClean <- reactive ({
x<-plotTrending()
#extract text
x_text <- x$text
# convert all text to lower case
x_text <- tolower(x_text)
# Replace blank space ("rt")
x_text <- gsub("rt", "", x_text)
# Replace @UserName
x_text <- gsub("@\\w+", "", x_text)
# Remove punctuation
x_text <- gsub("[[:punct:]]", "", x_text)
# Remove links
x_text <- gsub("http\\w+", "", x_text)
# Remove tabs
x_text <- gsub("[ |\t]{2,}", "", x_text)
# Remove blank spaces at the beginning
x_text <- gsub("^ ", "", x_text)
# Remove blank spaces at the end
x_text <- gsub(" $", "", x_text)
# calculationg total score for each sentiment
})
sentim <- reactive ({
x_text <- textClean()
# convert into corpus type
x_text.text.corpus <- Corpus(VectorSource(x_text))
# clean up by removing stop words
x_text.text.corpus <- tm_map(x_text.text.corpus, function(x) removeWords(x, stopwords()))
# getting emotions using in-built function
mysentiment_x <- get_nrc_sentiment((x_text))
})
output$p1 <- renderPlot({
mysentiment_x <- sentim()
Sentimentscores_x <- data.frame(colSums(mysentiment_x[, ]))
names(Sentimentscores_x) <- "Score"
Sentimentscores_x <- cbind("sentiment" = rownames(Sentimentscores_x), Sentimentscores_x)
rownames(Sentimentscores_x) <- NULL
# plotting the sentiments with scores
ggplot(data = Sentimentscores_x, aes(x = sentiment, y = Score)) + geom_bar(aes(fill = sentiment), stat = "identity") +
theme(legend.position = "none") +
xlab("Sentiments") + ylab("scores") + ggtitle(paste("Sentiments of people behind the tweets on", input$trending, sep = " "))
}, height = 850, width = 1050)
trends <- eventReactive(input$woeid, {
req(input$woeid)
current_trends <- getTrends(input$woeid)
current_trends["trend_date"] <- Sys.Date()
current_trends <- as.data.frame(current_trends)
names(current_trends)[1] <- "Trending"
current_trends
})
output$trends <- renderDT({
req(input$woeid)
trends()
})
output$p <- renderPlot({
req(trends())
datas <- trends()
x <- datas[, 1]
y <- seq(1, length(x))
# dev.cur(width = 1000, height = 1000, unit = "px")
wordcloud(x, rev(y), min.freq = 1, colors = brewer.pal(8, "Dark2"), random.color = TRUE, random.order = TRUE, use.r.layout = FALSE, max.words = 200, rot.per = 0.35)
}, height = 950, width = 1050)
}
ui <- dashboardPage(
skin = "blue",
dashboardHeader(title = "ShinyTwit"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Trending", tabName = "dataInput", icon = icon("upload")),
menuItem("Search", tabName = "regressions", icon = icon("random")),
menuItem("Analytics", tabName = "mixmod", icon = icon("cubes"))
)
),
dashboardBody( # Body content
tabItems(
tabItem( # First tab content
tabName = "dataInput",
fluidRow(
column(
width = 3,
textInput("location", "Type Location", "Latvia"),
actionButton("lookup", "Lookup"), # updated from July 28
textInput("woeid", "Numbers from the ")
),
column(
width = 9,
tabsetPanel(
tabPanel(
"Location",
box(
width = 12,
htmlOutput("inc") # ,
)
),
tabPanel(
"WordCloud",
box(
width = 12,
plotOutput("p"), style = "height:800px;width:600;overflow-y: scroll;overflow-x: scroll;"
)
),
tabPanel(
"Table",
box(
width = 12,
DTOutput("trends"), style = "height:700px; overflow-y: scroll;overflow-x: scroll;"
)
)
)
)
)
),
tabItem( # First tab content
tabName = "regressions",
fluidRow(
column(
width = 3,
textInput("trending", "Hashtag", "#Champion"),
numericInput("TweetsN", "Number of tweets", 5, min = 1, max = 4000),
actionButton("looktrending", "Lookup") # updated from July 28
),
column(
width = 9,
tabsetPanel(
tabPanel(
"Sentiment Plot",
box(
width = 12,
plotOutput("p1"), style = "height:800px;width:600;overflow-y: scroll;overflow-x: scroll;"
)
)
)
)
)
)
)
)
)
# Run the app ----
shinyApp(ui, server)
library (shinydashboard)
runApp('ShinyTwit.R')
library (shiny)
runApp('ShinyTwit.R')
