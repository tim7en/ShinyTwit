labs(x="Week",y="")+
theme_bw(base_size=10)+
theme(legend.title=element_blank(),
panel.grid=element_blank(),
panel.border=element_blank(),
axis.ticks=element_blank(),
strip.background=element_blank(),
legend.position="top",
legend.justification="right",
legend.direction="horizontal",
legend.key.size=unit(0.3,"cm"),
legend.spacing.x=unit(0.2,"cm"))
library (ggplot2)
# prepare date range
dfr <- data.frame(date=seq(as.Date('2018-06-11'),as.Date('2018-08-12'),by=1))
dfr$day <- factor(strftime(dfr$date,format="%a"),levels=rev(c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")))
dfr$week <- factor(strftime(dfr$date,format="%V"))
dfr$month <- factor(strftime(dfr$date,format="%B"),levels=c("June","July","August"))
dfr$ddate <- factor(strftime(dfr$date,format="%d"))
# add date tracks
dfr$comment <- "Available"
dfr$comment[dfr$date>=as.Date('2018-06-11') & dfr$date<=as.Date('2018-06-20')] <- "Limited"
dfr$comment[dfr$date>=as.Date('2018-06-21') & dfr$date<=as.Date('2018-06-29')] <- "Not available"
dfr$comment[dfr$date>=as.Date('2018-07-09') & dfr$date<=as.Date('2018-07-13')] <- "Not available"
dfr$comment[dfr$date>=as.Date('2018-08-06') & dfr$date<=as.Date('2018-08-10')] <- "Not available"
dfr$comment[dfr$day=="Sat" | dfr$day=="Sun"] <- "Weekend"
dfr$comment <- factor(dfr$comment,levels=c("Available","Limited","Not available","Weekend"))
p <- ggplot(dfr,aes(x=week,y=day))+
geom_tile(aes(fill=comment))+
geom_text(aes(label=ddate))+
scale_fill_manual(values=c("#8dd3c7","#ffffb3","#fb8072","#d3d3d3"))+
facet_grid(~month,scales="free",space="free")+
labs(x="Week",y="")+
theme_bw(base_size=10)+
theme(legend.title=element_blank(),
panel.grid=element_blank(),
panel.border=element_blank(),
axis.ticks=element_blank(),
strip.background=element_blank(),
legend.position="top",
legend.justification="right",
legend.direction="horizontal",
legend.key.size=unit(0.3,"cm"),
legend.spacing.x=unit(0.2,"cm"))
p
library (ggplot2)
# prepare date range
dfr <- data.frame(date=seq(as.Date('2018-03-11'),as.Date('2018-08-12'),by=1))
dfr$day <- factor(strftime(dfr$date,format="%a"),levels=rev(c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")))
dfr$week <- factor(strftime(dfr$date,format="%V"))
dfr$month <- factor(strftime(dfr$date,format="%B"),levels=c("June","July","August"))
dfr$ddate <- factor(strftime(dfr$date,format="%d"))
# add date tracks
dfr$comment <- "Available"
dfr$comment[dfr$date>=as.Date('2018-06-11') & dfr$date<=as.Date('2018-06-20')] <- "Limited"
dfr$comment[dfr$date>=as.Date('2018-06-21') & dfr$date<=as.Date('2018-06-29')] <- "Not available"
dfr$comment[dfr$date>=as.Date('2018-07-09') & dfr$date<=as.Date('2018-07-13')] <- "Not available"
dfr$comment[dfr$date>=as.Date('2018-08-06') & dfr$date<=as.Date('2018-08-10')] <- "Not available"
dfr$comment[dfr$day=="Sat" | dfr$day=="Sun"] <- "Weekend"
dfr$comment <- factor(dfr$comment,levels=c("Available","Limited","Not available","Weekend"))
p <- ggplot(dfr,aes(x=week,y=day))+
geom_tile(aes(fill=comment))+
geom_text(aes(label=ddate))+
scale_fill_manual(values=c("#8dd3c7","#ffffb3","#fb8072","#d3d3d3"))+
facet_grid(~month,scales="free",space="free")+
labs(x="Week",y="")+
theme_bw(base_size=10)+
theme(legend.title=element_blank(),
panel.grid=element_blank(),
panel.border=element_blank(),
axis.ticks=element_blank(),
strip.background=element_blank(),
legend.position="top",
legend.justification="right",
legend.direction="horizontal",
legend.key.size=unit(0.3,"cm"),
legend.spacing.x=unit(0.2,"cm"))
p
library (ggplot2)
# prepare date range
dfr <- data.frame(date=seq(as.Date('2018-03-11'),as.Date('2018-08-12'),by=1))
dfr$day <- factor(strftime(dfr$date,format="%a"),levels=rev(c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")))
dfr$week <- factor(strftime(dfr$date,format="%V"))
dfr$month <- factor(strftime(dfr$date,format="%B"),levels=c("June","July","August"))
dfr$ddate <- factor(strftime(dfr$date,format="%d"))
# add date tracks
dfr$comment <- "Available"
dfr$comment[dfr$date>=as.Date('2018-03-11') & dfr$date<=as.Date('2018-06-20')] <- "Limited"
dfr$comment[dfr$date>=as.Date('2018-06-21') & dfr$date<=as.Date('2018-06-29')] <- "Not available"
dfr$comment[dfr$date>=as.Date('2018-07-09') & dfr$date<=as.Date('2018-07-13')] <- "Not available"
dfr$comment[dfr$date>=as.Date('2018-08-06') & dfr$date<=as.Date('2018-08-10')] <- "Not available"
dfr$comment[dfr$day=="Sat" | dfr$day=="Sun"] <- "Weekend"
dfr$comment <- factor(dfr$comment,levels=c("Available","Limited","Not available","Weekend"))
p <- ggplot(dfr,aes(x=week,y=day))+
geom_tile(aes(fill=comment))+
geom_text(aes(label=ddate))+
scale_fill_manual(values=c("#8dd3c7","#ffffb3","#fb8072","#d3d3d3"))+
facet_grid(~month,scales="free",space="free")+
labs(x="Week",y="")+
theme_bw(base_size=10)+
theme(legend.title=element_blank(),
panel.grid=element_blank(),
panel.border=element_blank(),
axis.ticks=element_blank(),
strip.background=element_blank(),
legend.position="top",
legend.justification="right",
legend.direction="horizontal",
legend.key.size=unit(0.3,"cm"),
legend.spacing.x=unit(0.2,"cm"))
p
library (ggplot2)
# prepare date range
dfr <- data.frame(date=seq(as.Date('2018-06-11'),as.Date('2018-08-12'),by=1))
dfr$day <- factor(strftime(dfr$date,format="%a"),levels=rev(c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")))
dfr$week <- factor(strftime(dfr$date,format="%V"))
dfr$month <- factor(strftime(dfr$date,format="%B"),levels=c("June","July","August"))
dfr$ddate <- factor(strftime(dfr$date,format="%d"))
dfr
factor(strftime(dfr$date,format="%B"))
library (ggplot2)
# prepare date range
dfr <- data.frame(date=seq(as.Date('2018-06-11'),as.Date('2018-08-12'),by=1))
dfr$day <- factor(strftime(dfr$date,format="%a"),levels=rev(c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")))
dfr$week <- factor(strftime(dfr$date,format="%V"))
dfr$month <- factor(strftime(dfr$date,format="%B"))
dfr$ddate <- factor(strftime(dfr$date,format="%d"))
# add date tracks
dfr$comment <- "Available"
dfr$comment[dfr$date>=as.Date('2018-06-11') & dfr$date<=as.Date('2018-06-20')] <- "Limited"
dfr$comment[dfr$date>=as.Date('2018-06-21') & dfr$date<=as.Date('2018-06-29')] <- "Not available"
dfr$comment[dfr$date>=as.Date('2018-07-09') & dfr$date<=as.Date('2018-07-13')] <- "Not available"
dfr$comment[dfr$date>=as.Date('2018-08-06') & dfr$date<=as.Date('2018-08-10')] <- "Not available"
dfr$comment[dfr$day=="Sat" | dfr$day=="Sun"] <- "Weekend"
dfr$comment <- factor(dfr$comment,levels=c("Available","Limited","Not available","Weekend"))
p <- ggplot(dfr,aes(x=week,y=day))+
geom_tile(aes(fill=comment))+
geom_text(aes(label=ddate))+
scale_fill_manual(values=c("#8dd3c7","#ffffb3","#fb8072","#d3d3d3"))+
facet_grid(~month,scales="free",space="free")+
labs(x="Week",y="")+
theme_bw(base_size=10)+
theme(legend.title=element_blank(),
panel.grid=element_blank(),
panel.border=element_blank(),
axis.ticks=element_blank(),
strip.background=element_blank(),
legend.position="top",
legend.justification="right",
legend.direction="horizontal",
legend.key.size=unit(0.3,"cm"),
legend.spacing.x=unit(0.2,"cm"))
p
factor(strftime(dfr$date,format="%B"))
levels(factor(strftime(dfr$date,format="%B")))
rev(levels(factor(strftime(dfr$date,format="%B"))))
dfr$month <- factor(strftime(dfr$date,format="%B"), levels = rev (factpr(strftime(dfr$date, format = "%B"))))
dfr$month <- factor(strftime(dfr$date,format="%B"), levels = rev (factor(strftime(dfr$date, format = "%B"))))
dfr$month <- factor(strftime(dfr$date,format="%B"), levels = rev (factor(strftime(dfr$date, format = "%B"))))
dfr$month <- factor(strftime(dfr$date,format="%B"), levels = rev (levels(factor(strftime(dfr$date, format = "%B")))))
dfr$month
library (ggplot2)
# prepare date range
dfr <- data.frame(date=seq(as.Date('2018-03-11'),as.Date('2018-08-12'),by=1))
dfr$day <- factor(strftime(dfr$date,format="%a"),levels=rev(c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")))
dfr$week <- factor(strftime(dfr$date,format="%V"))
dfr$month <- factor(strftime(dfr$date,format="%B"), levels = rev (levels(factor(strftime(dfr$date, format = "%B")))))
dfr$ddate <- factor(strftime(dfr$date,format="%d"))
View(dfr)
# add date tracks
dfr$comment <- "Available"
dfr$comment[dfr$date>=as.Date('2018-03-11') & dfr$date<=as.Date('2018-06-20')] <- "Limited"
dfr$comment[dfr$date>=as.Date('2018-06-21') & dfr$date<=as.Date('2018-06-29')] <- "Not available"
dfr$comment[dfr$date>=as.Date('2018-07-09') & dfr$date<=as.Date('2018-07-13')] <- "Not available"
dfr$comment[dfr$date>=as.Date('2018-08-06') & dfr$date<=as.Date('2018-08-10')] <- "Not available"
dfr$comment[dfr$day=="Sat" | dfr$day=="Sun"] <- "Weekend"
dfr$comment <- factor(dfr$comment,levels=c("Available","Limited","Not available","Weekend"))
p <- ggplot(dfr,aes(x=week,y=day))+
geom_tile(aes(fill=comment))+
geom_text(aes(label=ddate))+
scale_fill_manual(values=c("#8dd3c7","#ffffb3","#fb8072","#d3d3d3"))+
facet_grid(~month,scales="free",space="free")+
labs(x="Week",y="")+
theme_bw(base_size=10)+
theme(legend.title=element_blank(),
panel.grid=element_blank(),
panel.border=element_blank(),
axis.ticks=element_blank(),
strip.background=element_blank(),
legend.position="top",
legend.justification="right",
legend.direction="horizontal",
legend.key.size=unit(0.3,"cm"),
legend.spacing.x=unit(0.2,"cm"))
p
runApp('ShinyScheduler')
runApp('ShinyScheduler')
runApp('ShinyScheduler')
?calendarPlot
runApp('ShinyScheduler')
runApp('ShinyScheduler')
runApp('ShinyScheduler')
runApp('ShinyScheduler')
runApp('ShinyScheduler')
runApp('ShinyScheduler')
runApp('ShinyScheduler')
runApp('ShinyScheduler')
runApp('ShinyScheduler')
runApp('ShinyScheduler')
?fluidRow
runApp('ShinyScheduler')
runApp('ShinyScheduler')
runApp('ShinyScheduler')
runApp('ShinyScheduler')
runApp('ShinyScheduler')
runApp('ShinyScheduler')
runApp('ShinyScheduler')
runApp('ShinyScheduler')
runApp('ShinyScheduler')
runApp('ShinyScheduler')
runApp('ShinyScheduler')
?DTOutput
runApp('ShinyScheduler')
runApp('ShinyScheduler')
runApp('ShinyScheduler')
runApp('ShinyScheduler')
runApp('ShinyScheduler')
library (dplyr)
runApp('ShinyScheduler')
runApp('ShinyScheduler')
?formatStyle
runApp('ShinyScheduler')
runApp('ShinyScheduler')
?datatable
runApp('ShinyScheduler')
runApp('ShinyScheduler')
library(DT)
options(DT.options = list(pageLength = 5))
df = as.data.frame(cbind(matrix(round(rnorm(50), 3), 10), sample(0:1, 10, TRUE)))
# style V6 based on values of V6
datatable(df) %>% formatStyle(
'V6',
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
)
class (df)
names(df)
colnames(df)
runApp('ShinyScheduler')
shiny::runApp('ShinyScheduler')
runApp('ShinyScheduler')
install.packages("lubridate")
install.packages("xts")
install.packages("dygraoh")
install.packages("dygraphs")
runApp('ShinyScheduler')
runApp('ShinyScheduler')
Sys.time ()
runApp('ShinyScheduler')
t <- format(Sys.time(), "%Y-%m-%d")
t
t <- format(Sys.time()-7, "%Y-%m-%d")
t
t <- format((Sys.time()-7), "%Y-%m-%d")
t
t <- format((Sys.Date()-7), "%Y-%m-%d")
t
t <- format((Sys.Date()-34), "%Y-%m-%d")
t
runApp('ShinyScheduler')
t <- format(Sys.Date(), "%Y-%m-%d")
t
t_7 <-format(Sys.Date()-7, "%Y-%m-%d")
t_7
runApp('ShinyScheduler')
?tabsetPanel
runApp('ShinyScheduler')
?dygraph
runApp('ShinyScheduler')
?as.xts
?xts
runApp('ShinyScheduler')
runApp('ShinyScheduler')
runApp('ShinyScheduler')
send.home
runApp('ShinyScheduler')
runApp('ShinyScheduler')
?align
runApp('ShinyScheduler')
styler:::style_active_file()
runApp('ShinyScheduler')
styler:::style_active_file()
runApp('ShinyScheduler')
install.packages("crayon")
runApp('ShinyScheduler')
runApp('ShinyScheduler')
styler:::style_active_file()
runApp('ShinyScheduler')
runApp('ShinyScheduler')
runApp('ShinyScheduler')
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
#install.packages ('keras')
library (keras)
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
dim (x_train) <- c(nrow(x_train), 784)
dim (x_test) <- c(nrow(x_test), 784)
x_train <- x_train / 255
x_test <- x_test / 255
y_train <- to_categorical(y_train, 10)
y_test <- to_categorical(y_test, 10)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = 'relu', input_shape = c(784)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 10, activation = 'softmax')
summary(model)
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
history <- model %>% fit(
x_train, y_train,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
install_keras(tensorflow = "gpu")
#install.packages ('keras')
#library (keras)
install_keras(tensorflow = "gpu")
library(keras)
install_keras(tensorflow = "gpu")
library(keras)
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
dim (x_train) <- c(nrow(x_train), 784)
dim (x_test) <- c(nrow(x_test), 784)
x_train <- x_train / 255
x_test <- x_test / 255
library("xgboost")  # the main algorithm
library("archdata") # for the sample dataset
library(devtools)
devtools::install_github('topepo/caret/pkg/caret')
system ()
# NOT RUN {
# list all files in the current directory using the -F flag
# }
# NOT RUN {
system("ls -F")
# }
# NOT RUN {
# t1 is a character vector, each element giving a line of output from who
# (if the platform has who)
t1 <- try(system("who", intern = TRUE))
system
system ()
system("echo $PATH")
devtools::install_github('topepo/caret/pkg/caret')
devtools::install_github('topepo/caret/pkg/caret')
devtools::install_github('topepo/caret/pkg/caret')
library (caret)
file.path(R.home("bin"), "R")
normalizePath(file.path(R.home("bin"), "R"))
Sys.getenv("R_HOME")
devtools::install_github('topepo/caret/pkg/caret')
library("xgboost")  # the main algorithm
library("archdata") # for the sample dataset
library(devtools)
devtools::install_github('topepo/caret/pkg/caret')
Sys.setenv(PATH = paste("C:/Rtools/bin", Sys.getenv("PATH"), sep=";"))
Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")
devtools::install_github('topepo/caret/pkg/caret')
R CMD INSTALL
find_rtools()
find.package(rtools)
devtools::find_rtools()
library (devtools)
devtools::find_rtools()
install.packages("covr")
library (covr)
devtools::find_rtools()
find(rtools)
covr::find_rtools(debug = FALSE)
covr
?covr
?find_Rtools
?find_rtools
rtools_path()
has_rtools
has_rtools()
pkgbuild::rtools_path()
pkgbuild::find_rtools()
pkgbuild::find_rtools(debug = TRUE)
setwd("~/ShinyTwit/TwitLib")
library ('data.table')
library ('tm')
library ('syuzhet')
library ('SnowballC')
library ('dygraphs')
library ('quantmod')
library ('ggplot2')
library ('readr')
library ('dplyr')
library ('lubridate')
library ('parallel')
#read in big table
x <- fread ('blockchain.csv')
cl <- detectCores() - 1 # or
cl <- makeCluster(cl)
clusterExport(cl = cl, c("get_sentiment", "get_sent_values", "get_nrc_sentiment", "get_nrc_values", "parLapply"))
#subset only first 50000 characters
x_text <- x$text
#measure a time of processing for sentiment analysis of twits (6 min)
#can be parallelized in the function
Sys.time()
sentims <- get_nrc_sentiment((x_text), cl = cl)
stopCluster (cl)
Sys.time()
#create a data frame with (hours)
datas <- cbind(x$created_at, sentims)
colnames(datas)[1] <- 'Date'
#extract hours of the Date
datas <- datas %>%
mutate(hour_of_day = hour(as.POSIXct(strptime(Date, "%Y-%m-%d %H:%M:%S"))))
#extract day of the Date
datas <- datas %>%
mutate(day = day(as.POSIXct(strptime(Date, "%Y-%m-%d %H:%M:%S"))))
#mean by hours for entire data set
datas %>%
mutate(hour_of_day = hour(as.POSIXct(strptime(Date, "%Y-%m-%d %H:%M:%S")))) %>%
group_by(hour_of_day) %>%
summarise(meanValue = mean(anticipation))
#get the mean of the column by day & hour
y <- datas %>%
mutate(hour_of_day = hour(as.POSIXct(strptime(Date, "%Y-%m-%d %H:%M:%S")))) %>%
group_by(hour_of_day, day) %>%
summarise_all(funs(mean)) #summarize all columns
#summarise(meanValue = mean(anticipation)) #summarize particular column
#sort data frame by hour of the day
y <- y[with(y, order( day,hour_of_day)),]
#get correlation
M <- cor (y[,4:ncol(y)])
#plot corrplot
corrplot (M, method = 'pie', type = 'upper')
#plot corrplot
corrplot (M, method = 'pie', type = 'upper')
library ('corrplot')
#plot corrplot
corrplot (M, method = 'pie', type = 'upper')
View(y)
boxplot (y$anger)
boxplot (y$day, y[,4:ncol(y)])
boxplot (y[,4:ncol(y)])
View(y)
#mean by hours for entire data set
datas %>%
mutate(hour_of_day = hour(as.POSIXct(strptime(Date, "%Y-%m-%d %H:%M:%S")))) %>%
group_by(hour_of_day) %>%
summarise_all(funs(mean)) #summarize all columns
#mean by hours for entire data set
y_h <- datas %>%
mutate(hour_of_day = hour(as.POSIXct(strptime(Date, "%Y-%m-%d %H:%M:%S")))) %>%
group_by(hour_of_day) %>%
summarise_all(funs(mean)) #summarize all columns
boxplot (y_h[,4:ncol(y)])
y_h
boxplot (y_h[,3:ncol(y)])
boxplot (y_h[,3:ncol(y_h)])
y_h[,3:ncol_y_h]
y_h[,3:ncol(y_h)]
boxplot (y_h[,3:ncol(y_h)-1])
plot (y_h$hour_of_day~y_h$anger)
plot (y_h$hour_of_day,y_h$anger)
plot (y_h$hour_of_day,y_h$anticipation)
plot (y_h$hour_of_day,y_h$disgust)
plot (y_h$hour_of_day,y_h$fear)
plot (y_h$hour_of_day,y_h$joy)
plot (y_h$hour_of_day,y_h$sadness)
plot (y_h$hour_of_day,y_h$surprise)
plot (y_h$hour_of_day,y_h$trust)
plot (y_h$hour_of_day,y_h$negative)
plot (y_h$hour_of_day,y_h$positive)
plot (y_h$hour_of_day,y_h$day)
Sys.time()
y_d <- datas %>%
mutate(hour_of_day = hour(as.POSIXct(strptime(Date, "%Y-%m-%d %H:%M:%S")))) %>%
group_by(day) %>%
summarise_all(funs(mean)) #summarize all columns
warning()
View(y_d)
plot (y_d$day,y_d$negative)
plot (y_d$day,y_d$positive)
plot (y_d$day,y_d$surprise)
plot (y_d$day,y_d$sadness)
plot (y_d$day,y_d$anger)
plot (y_d$day,y_d$anticipation)
plot (y_d$day,y_d$disgust)
plot (y_d$day,y_d$fear)
plot (y_d$day,y_d$joy)
plot (y_d$day,y_d$sadness)
